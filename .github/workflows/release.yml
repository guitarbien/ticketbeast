name: Create Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'tags'
        required: true
      commitish:
        description: 'branch or commit id'
        required: true
        default: 'master'
      project_column:
        description: 'project_column'
        required: true
        default: 'stage'
jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v4
        id: get-body
        env:
          PROJECT_COLUMN: ${{ github.event.inputs.project_column }}
        with:
          result-encoding: string
          script: |
            console.log(context)
            const {PROJECT_COLUMN} = process.env;
            console.log(PROJECT_COLUMN);
            const query = 'query ($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { projects (first:2, states: OPEN) { nodes { name url id columns (first:100) { nodes { id name cards (first:100) { pageInfo { hasNextPage endCursor hasPreviousPage startCursor } totalCount edges { cursor } nodes { content { __typename ... on Issue { title id number } ... on PullRequest { title id } } } } } } } } } } ';

            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo,
            }
            const result = await github.graphql(query, variables)
            console.log(result);
            let str = '';
            for (column of result.repository.projects.nodes[0].columns.nodes) {
              console.log(column.name,PROJECT_COLUMN, column.name === `${PROJECT_COLUMN}`);
              if (column.name === `${PROJECT_COLUMN}`) {
                for (card of column.cards.nodes) {
                  console.log(card)
                  if (card.content.__typename === 'Issue') {
                    str += ' - ' + card.content.title + " #" + card.content.number + "\n"
                  }
                }
              }
            }
            console.log(str)
            if (str === '') {
              throw '找不到對應的issues'
            }
            return str

      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.event.inputs.tag_name }}
          release_name: regular release
          commitish: ${{ github.event.inputs.commitish }}
          body: ${{ steps.get-body.outputs.result }}
          draft: true
          prerelease: true
