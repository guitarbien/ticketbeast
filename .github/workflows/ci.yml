name: build
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
  schedule:
    - cron:  '0 4 * * *'
jobs:
  phpunit:
    runs-on: ${{ matrix.os }}
    container:
    services:
      postgres:
        image: postgres:12.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        os: [ubuntu-latest]
        php-versions: [7.3, 7.4]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, gd
          tools: composer:v2
          coverage: xdebug

      - name: for code climate
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter before-build

      - name: Setup Node.js environment
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: |
          composer install --prefer-dist --optimize-autoloader
          npm install
        env:
          APP_ENV: testing

      - name: Prepare the application
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate

      - name: Package npm for production
        run: npm run prod

      - name: run phpunit
        run: |
          ./vendor/bin/phpunit --coverage-text --coverage-clover build/logs/clover.xml --coverage-html report/
          ./cc-test-reporter after-build --id 7b746575241d81908d30ac64ff990607172b06d40017cda9f47dde08b1a42402
        env:
          DB_CONNECTION: pgsql
          DB_HOST: localhost
          DB_DATABASE: test
          DB_USERNAME: postgres
          DB_PASSWORD: postgres

      - name: persist testing result
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: report

      - name: Slack Notification
        uses: homoluctus/slatify@master
        if: always()
        with:
          type: ${{ job.status }}
          job_name: '*integration test* ${{ matrix.php-versions }} on ${{ matrix.os }}'
          url: ${{ secrets.SLACK_WEBHOOK }}
          mention_if: 'failure'
#  dusk-php-latest:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      max-parallel: 3
#      matrix:
#        os: [ubuntu-latest]
#        php-versions: [7.3, 7.4]
#    services:
#      mysql:
#        image: mysql:8
#        env:
#          MYSQL_ROOT_PASSWORD: root
#          MYSQL_DATABASE: homestead
#        ports:
#          - 3306:3306
#        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
#    steps:
#      - uses: actions/checkout@master
#      - name: Copy env
#        run: cp .env.example .env
#      - name: Install Composer dependencies
#        run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
#      - name: Generate Application Key
#        run: php artisan key:generate
#      - name: Install npm dependencies
#        run: npm install
#      - name: Package npm for production
#        run: npm run prod
#      - name: Install laravel dusk
#        run: php artisan dusk:chrome-driver
#      - name: Start Chrome Driver
#        run: ./vendor/laravel/dusk/bin/chromedriver-linux > /dev/null 2>&1 &
#      - name: Run Laravel Server
#        run: php artisan serve > /dev/null 2>&1 &
#      - name: Run Dusk Tests
#        run: php artisan dusk
#      - name: Slack Notification
#        uses: homoluctus/slatify@master
#        if: always()
#        with:
#          type: ${{ job.status }}
#          job_name: '*browser test* ${{ matrix.php-versions }} on ${{ matrix.os }}'
#          url: ${{ secrets.SLACK_WEBHOOK }}
#          mention_if: 'failure'
